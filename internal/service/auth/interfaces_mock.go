// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package auth is a generated GoMock package.
package auth

import (
	model "drunklish/internal/model"
	dto "drunklish/internal/service/auth/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckUserDB mocks base method.
func (m *MockRepository) CheckUserDB(email string) (*dto.ResponseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserDB", email)
	ret0, _ := ret[0].(*dto.ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserDB indicates an expected call of CheckUserDB.
func (mr *MockRepositoryMockRecorder) CheckUserDB(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserDB", reflect.TypeOf((*MockRepository)(nil).CheckUserDB), email)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(email, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), email, password)
}

// ExistEmail mocks base method.
func (m *MockRepository) ExistEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistEmail indicates an expected call of ExistEmail.
func (mr *MockRepositoryMockRecorder) ExistEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistEmail", reflect.TypeOf((*MockRepository)(nil).ExistEmail), email)
}
