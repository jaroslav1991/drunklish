// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package word is a generated GoMock package.
package word

import (
	dto "drunklish/internal/service/word/dto"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(word, translate string, createdAt time.Time, userId int64) (*dto.ResponseFromCreateWord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", word, translate, createdAt, userId)
	ret0, _ := ret[0].(*dto.ResponseFromCreateWord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(word, translate, createdAt, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), word, translate, createdAt, userId)
}

// CreateStatisticByTrainingId mocks base method.
func (m *MockRepository) CreateStatisticByTrainingId(trainingId int64, correctAnswers, wrongAnswers dto.ResponseWordList, userId int64) (*dto.ResponseCreateStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatisticByTrainingId", trainingId, correctAnswers, wrongAnswers, userId)
	ret0, _ := ret[0].(*dto.ResponseCreateStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatisticByTrainingId indicates an expected call of CreateStatisticByTrainingId.
func (mr *MockRepositoryMockRecorder) CreateStatisticByTrainingId(trainingId, correctAnswers, wrongAnswers, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatisticByTrainingId", reflect.TypeOf((*MockRepository)(nil).CreateStatisticByTrainingId), trainingId, correctAnswers, wrongAnswers, userId)
}

// CreateTraining mocks base method.
func (m *MockRepository) CreateTraining(words, answers dto.ResponseWordList, wordsTotal, userId int64) (*dto.ResponseForTraining, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTraining", words, answers, wordsTotal, userId)
	ret0, _ := ret[0].(*dto.ResponseForTraining)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTraining indicates an expected call of CreateTraining.
func (mr *MockRepositoryMockRecorder) CreateTraining(words, answers, wordsTotal, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTraining", reflect.TypeOf((*MockRepository)(nil).CreateTraining), words, answers, wordsTotal, userId)
}

// DeleteWord mocks base method.
func (m *MockRepository) DeleteWord(userId, id int64) (*dto.ResponseFromDeleting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWord", userId, id)
	ret0, _ := ret[0].(*dto.ResponseFromDeleting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWord indicates an expected call of DeleteWord.
func (mr *MockRepositoryMockRecorder) DeleteWord(userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWord", reflect.TypeOf((*MockRepository)(nil).DeleteWord), userId, id)
}

// GetStatisticByTrainingId mocks base method.
func (m *MockRepository) GetStatisticByTrainingId(trainingId, userId int64) (*dto.ResponseStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticByTrainingId", trainingId, userId)
	ret0, _ := ret[0].(*dto.ResponseStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticByTrainingId indicates an expected call of GetStatisticByTrainingId.
func (mr *MockRepositoryMockRecorder) GetStatisticByTrainingId(trainingId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticByTrainingId", reflect.TypeOf((*MockRepository)(nil).GetStatisticByTrainingId), trainingId, userId)
}

// GetTrainingInfoById mocks base method.
func (m *MockRepository) GetTrainingInfoById(trainingId, userId int64) (*dto.ResponseTrainingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainingInfoById", trainingId, userId)
	ret0, _ := ret[0].(*dto.ResponseTrainingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainingInfoById indicates an expected call of GetTrainingInfoById.
func (mr *MockRepositoryMockRecorder) GetTrainingInfoById(trainingId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainingInfoById", reflect.TypeOf((*MockRepository)(nil).GetTrainingInfoById), trainingId, userId)
}

// GetWordByCreated mocks base method.
func (m *MockRepository) GetWordByCreated(userId int64, firstDate, secondDate time.Time) (*dto.ResponseWords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordByCreated", userId, firstDate, secondDate)
	ret0, _ := ret[0].(*dto.ResponseWords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWordByCreated indicates an expected call of GetWordByCreated.
func (mr *MockRepositoryMockRecorder) GetWordByCreated(userId, firstDate, secondDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordByCreated", reflect.TypeOf((*MockRepository)(nil).GetWordByCreated), userId, firstDate, secondDate)
}

// GetWords mocks base method.
func (m *MockRepository) GetWords(userId int64) (*dto.ResponseWords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWords", userId)
	ret0, _ := ret[0].(*dto.ResponseWords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWords indicates an expected call of GetWords.
func (mr *MockRepositoryMockRecorder) GetWords(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWords", reflect.TypeOf((*MockRepository)(nil).GetWords), userId)
}

// Update mocks base method.
func (m *MockRepository) Update(word, translate string, id, userId int64) (*dto.ResponseWord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", word, translate, id, userId)
	ret0, _ := ret[0].(*dto.ResponseWord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(word, translate, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), word, translate, id, userId)
}
